#!/usr/bin/python
# -*- coding: utf-8 -*-

"""The module includes various utilities."""

__author__  = "Lars Fabig"
__date__    = "14.08.2016"
__email__   = "lfabig@mufin.com"
__docformat__ = 'reStructuredText'


# Standard library imports ...
import errno
import fnmatch
import os
import os.path
import re
import shutil
import subprocess
import validators



def validate_url(url):
    return validators.url(url) or url  == "http://localhost"


def is_tool(name):
    """Check whether `name` is on PATH and marked as executable."""
    return not subprocess.call(['which', name], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)


def ensuredirs(path):
    """Make sure that the path name exists. If not then create it"""
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def search_files_in_paths(paths, pattern):
    """Search files in a list of paths given a search pattern"""
    filtered_files = []
    for path in paths:
        files = [i for i in os.listdir(path) if os.path.isfile(os.path.join(path, i))]
        filtered_files = [os.path.join(path, j) for j in files if re.match(fnmatch.translate(pattern), j, re.IGNORECASE)]
    return filtered_files


def recursive_dirs(root_dir):
    """Search for subdirectories recursively"""
    return [a[0] for a in os.walk(root_dir)]


def search_files(root_dir, extensions, recursive=False):
    """Find files in a given directory with the default or user defined file extensions.
    Optionally the search can be recursively.

    :param root_dir: The directory to be scanned for the desired file extensions.
    :param extensions: List of file extensions to search for.
    :param recursive: If True then search the root_dir recursively.
    :type root_dir: string
    :type extensions: list
    :type recursive_: bool
    :returns: List of file names
    :rtype: list

    :Example:

    >>> import audioidmon.utils
    >>> audioidmon.utils.search_files("./audioidmon/tests/resources/", ["*.mfp"], True)
    [['./audioidmon/tests/resources/foo_corrupt.mfp',
      './audioidmon/tests/resources/foo.mfp']]
    >>> audioidmon.utils.search_files("./audioidmon/tests/", ["*.mfp"], True)
    [['./audioidmon/tests/resources/foo_corrupt.mfp',
      './audioidmon/tests/resources/foo.mfp']]
    >>> audioidmon.utils.search_files("./audioidmon/", ["*.mfp"], True)
    [['./audioidmon/tests/resources/foo_corrupt.mfp',
      './audioidmon/tests/resources/foo.mfp']]
    """
    files  = []
    if recursive:
        for ext in extensions:
            files.append(search_files_in_paths(recursive_dirs(root_dir), ext))
    else:
        for ext in extensions:
            files.append(search_files_in_paths([root_dir], ext))
    return files
