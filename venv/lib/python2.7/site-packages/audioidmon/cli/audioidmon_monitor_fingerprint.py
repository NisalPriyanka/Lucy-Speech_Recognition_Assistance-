#!/usr/bin/python
# -*- coding: utf-8 -*-

"""audioidmon_monitor_fingerprint: Script monitors one fingerprint and returns a report."""

__author__  = 'Lars Fabig'
__date__    = '09.08.2016'
__email__   = 'lfabig@mufin.com'
__docformat__ = 'reStructuredText'


# Standard library imports ...
import argparse
import json
import pkg_resources
import sys

# Local imports ...
import audioidmon
import audioidmon.utils


# Init command line parser
parser = argparse.ArgumentParser(prog='audioidmon_monitor_fingerprint', description='Monitor a single fingerprint against the database of reference fingerprints of the audioid-mon service. The stdout is displayed in JSON. Optionally the report can be stored as a file in JSON format.')
parser.add_argument('host_address', help='host address of audioid monitor service, e.g. http://127.0.0.1 [string]')
parser.add_argument('fingerprint_filename', help='filename of audioid fingerprint [string]')
parser.add_argument('--report', dest='report_filename', default=None, help='filename of report')
parser.add_argument('-v', '--verbose', help='increase output verbosity', action='store_true')
parser.add_argument('--version', help='print version number', action='version', version='%(prog)s {}'.format(pkg_resources.get_distribution('pyaudioidmon').version))


def main():
    # parsing command line options
    args = parser.parse_args()
    if not audioidmon.utils.validate_url(args.host_address):
        parser.error("invalid host url '{}'".format(args.host_address))
    # print input parameter
    if args.verbose:
        print "Monitor fingerprint:"
        print "  Fingerprint filename               : '%s'" % args.fingerprint_filename
        if args.report_filename:
            print "  Report filename                    : '%s'" % args.report_filename
        print "  Host address                       : '%s'" % args.host_address
    try:
    # instantiate audioid monitor client
        if args.verbose:
            print "  Init audioid monitor client ..."
        am = audioidmon.AudioidMonService(args.host_address)
        # add fingerprint
        if args.verbose:
            print "  Monitor fingerprint ...\n"
        response = am.monitor_fingerprint(args.fingerprint_filename)
        print json.dumps(response, sort_keys=True, indent=2)
        if args.report_filename:
            if args.verbose:
                print "  Save report ..."
            with open(args.report_filename, 'w') as outfile:
                outfile.write(json.dumps(response, sort_keys=True, indent=2))
    except Exception as err:
        sys.stderr.write("[Error] {} : {}\n".format(type(err).__name__, str(err)))
        sys.exit(1)
    if args.verbose:
        print "Done."
    sys.exit(0)


if __name__ == '__main__':
    main()
