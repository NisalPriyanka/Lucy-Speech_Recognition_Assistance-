#!/usr/bin/python
# -*- coding: utf-8 -*-

"""audioidmon_list_fingerprint_ids: Script returns a list of fingerprints, which are loaded in audioid monitor service."""

__author__  = 'Lars Fabig'
__date__    = '09.08.2016'
__email__   = 'lfabig@mufin.com'
__docformat__ = 'reStructuredText'


# Standard library imports ...
import argparse
import json
import pkg_resources
import sys

# Local imports ...
import audioidmon
import audioidmon.utils


# Init command line parser
parser = argparse.ArgumentParser(prog='audioidmon_list_fingerprint_ids', description='List the reference fingerprints currently loaded in the audioid-mon service. The stdout is displayed in JSON.')
parser.add_argument('host_address', help='host address of audioid monitor service, e.g. http://127.0.0.1 [string]')
parser.add_argument('--idlist', dest='idlist_filename', default=None, help='filename of id list')
parser.add_argument('-v', '--verbose', help='increase output verbosity', action='store_true')
parser.add_argument('--version', help='print version number', action='version', version='%(prog)s {}'.format(pkg_resources.get_distribution('pyaudioidmon').version))


def main():
    # parsing command line options
    args = parser.parse_args()
    if not audioidmon.utils.validate_url(args.host_address):
        parser.error("invalid host url '{}'".format(args.host_address))
    # print input parameter
    if args.verbose:
        print "Get fingerprint ids from audioid monitor service:"
        if args.idlist_filename:
            print "  Id list filename                   : '%s'" % args.idlist_filename
        print "  Host address                       : '%s'" % args.host_address
    try:
        # instantiate audioid monitor client
        if args.verbose:
            print "  Init audioid monitor client ..."
        am = audioidmon.AudioidMonService(args.host_address)
        # get fingerprint ids
        if args.verbose:
            print "  Get fingerprint ids ...\n"
        response = am.get_fingerprint_ids()
        print json.dumps(response, sort_keys=True, indent=2)
        if args.idlist_filename:
            if args.verbose:
                print "  Save id list ..."
            with open(args.idlist_filename, 'w') as outfile:
                outfile.write(json.dumps(response, sort_keys=True, indent=2))
    except Exception as err:
        sys.stderr.write("[Error] {} : {}\n".format(type(err).__name__, str(err)))
        sys.exit(1)
    if args.verbose:
        print "Done."
    sys.exit(0)


if __name__ == '__main__':
    main()
